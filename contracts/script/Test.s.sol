// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {ZkResolver} from "../src/resolver/ZkResolver.sol";
import {Script} from "forge-std/Script.sol";

contract Test is Script {
    function run() public view returns (bool) {
        ZkResolver resolver = ZkResolver(payable(0xc944774D81AC1185C7BB5c3474777E117A1adE62));
        bytes memory proof = bytes(
            hex"2902a2f747dc0be1b514920c9d2e37f896adfe15356d194ee29c556b683014b8216b1f41ba9347177d9082c06895fcbb5fe9c01ab9ee7bbabdae2f68eda213c62303bfde320f8534564aa39368ad811822e22eb113ebd72a56ac52bfab9e2eb91060a3ce391fcf1fa475ff83adbd9bccd90b1575d181a3565e68dba7bf0868630ad4757c2a385436b67575ef86c9ec7a4bd8853fe26ffb4582507ba3c5fa1f07064969dfa7a1de6ac99f862ddf5ecd84e4e8f4a6e41c164902ba0e00ed3999a128f7cca711cdd80bd6409854c06323869fb4b451b558637db6c06fc6fb479b0409bd21e65789c49492b63a36d162dd66c78eebb8b937258320d289bf11bcfc40224d65c41f47d366ad9c6d469f11a2409a887d23a7ce1e674e9b30267b70212c1edf1b49ee8f7b0bb289f96081291f5d9a59562242cf74fb91ad87fe778d28491f8fc9d048add6f6b67389a0ef77b72fb1648a42a22d2160f3c8e1fa9f5c8e7a0111084910dfa0cd5d570939e1d1dfa6dc544a21b0f528b48e48f803bf2bd5f717552f55efd93713840a7c6289b20139945dbbb7b5c5ad4e24c6e3828b269c1c0212e2d65a91db3472a6e13f30fa117d8c9048dddfdbe5360ec01b5370a744682a2e944b02d5d6edf67719bf53b162ed62385d2d0b76fe09e423647be2307c6f1bd88389849d739d5825ccd09d2918ba055a9b4e85db0c7f365c9816f1e842c6000baff7ae35022724e76a45530d3d68ccab9bdd33c1207f5d0b338b753f04cc2e8e7c9d0c4b0c208adc68535e2e6d1f81932a91169653a8922997f1ecd356921a8c1d56d3a57fb34fb5b8a63beaf97294dd250281cc115de7a69a43cfe9614428dec2949140467a1d6f12034ee896cad65309af956b2469078f48443b252cc517b8d7e087734e3d467c626491a4505164abe99c4341abcff7ec2e994238e85b2ae31b3ec4491b99e0b8ca812695212ed6d5906f7f72f4c403724407f69f12a505edd028c5b0b154c8a49c528ca173fc815a04c2f22659633e6079d7605512fd137040e487dddbfe2cf326c069d0c0999e8eeb866293b90e1aaef5545fec9e6b1d18e6ce5f4c2e850c7177030b605317fc2a48d26d828f03eeb5d85c32c5af6d1935799e117c284cefc10a07702f8982d900876343a4c9f38f2c2e30698c2d4f2f5797f8058cba37d025c31d6465098407b2dd82c5a8ccdbaad8eb15c25fbaf202b335f1be6d28b78ec1cedbe577ebbb89ffb0969fc45d77b21b6c0e4ac0b22425087bf8495ed7bc6be7b432cdd79f05f89a2fe21e9acd2f2dfd4bc31d50d5d40fb62d9f010d2b09751e86821e4c7afaf3e26749d601ae06e6bf4b82445a4eee15c4a2875448bfb491f998c225db318094028091d83825cd074e9b30d55a2dd91cd591e04390bb5d267081e31e46ca0c2b346249b45ef591c2100b3ddaffda5e25c1935b60497678f1d65cbce5b94509855f37f8d1aa4a9854eba420a6d49e461abcd1fe7253392ebc358cb17b4a4a32e91592598dec8fc64e67b27804af24681a51ea41daad780f6d598e39faa2c5c99d7b626dd8d99b4e18fb28a8bfa804e5285a23f37e9612c52d3e29de910ad61a1adfca062d7d3c5de971021118a825fc2232b002e313eaf9fade323ba234a090100eca0eeadada5d66907bae2520770b1a482eaf3d21e799674310a292f9f5e4fe2c661774a0e0a48ca9bade3815ec562f1728231cfdb468649f0c5897b61c06f71e326f0d8c5290f4fa0a0ba91705382bcaa8118c6e44c6e52051ec1f02d10e9b5a145ec1fec386981512bf6fa7f1e72664e9592f3ecbcc26cc5966eafcd1d527947997e16b11d05956350a0d46bdc82d45b6fdbb3457ff06cd20dd22546ca7767a023fff64db646cd37d551b412d1f23ae9d6937a175023ed2bb34358a86e23083fbd5b774da36fd562a7dbe29971516bf4dd8b2e6f3da3f998fd2d0d47dba5245183749b612a4b37a948fb7de7efe1a3d2461852b7bbe80b63acf41763c63954a314a43ca57d0e86f90041d07191c0b1c7605e8270a561e0b6b86cc414b3fb424b2cd4839571869bcbcc10105bfdc2b057b84b512a141d21663435c4a6f2c74cf4ebfaabb44af5b01c45dd022a9e318b59e2ce081a2ce741d89c0b551bf2bcb81f7386d77cc366a7c0812625c14412e42cf0b40730c5cbb1a9733fd0bfa818445841a49bf625f91a03c7a05cc74c9124f95678ff166dd737d2395248efb9f696bd37f5dd0449d4c4842411e75af1c11f354e60f7c5da25b9b9ffe02960a75a881d70e72a711360bfcb7fdf4c41fda2871cff48b84837a6313c45b803d362fd1a4eccfecd64ba5c04d3803af65217508532c3241aa7ba21fa634a6a04051a5a53d9e9061318d09a6af0e300896ca1f24f431094a87af9e45645f97ccdcb40627a97aa6b8eeea6550854c62c4aa53ea07cbbbf2c492c2e60be951c974beb5f38ca618e5cf0033dbf815f89d868778aa00956982e0bb45725a8eb4d065246eed6194417c0af33da0b42bd14b22dcd80e12e858123513acf88031ba21318bca2ebc5b3a00e146a19dc1ba9a9b8e1d8df60d87f8eef2b545709408ba8fc0ea018e85032179e95e8ac3104bd27e60761e1a03be156b7a96ff1e23a8db30ac1781a780743c8e8b65f6c3cd0829e4350a01012fcdac82b5a92ff8979dc47a24a26705136cdc5ceacd630b7c9c5829a2764a1e07ecc55fd626dca1a988d89b10ac679b3bb0e189e7b5cffcd7b1fbf86f771bad05cb66ac5f2852ce70db178adf45e021e66d473c52b5d6d37f73d1d1988b0401129cd16c3c06072ce4dc7bb9d77c25ac2b01e224f0e3264923f88902f266a9e7123fcbd6c7cda9aa5b1cfed30399e96c3ada83b476c19b3002c0f8f40c85c45c07758a7cdb3671a3d943db4989d3c1a6ed53c5cb71341335e6a5bd73db3fa6282f79c8f5e8f3da91f53b863f4967bc5cfe0cfdd6d415923f27b7fc30bc07639d084e0ec459f36f970f7bc5b3b4543e80b9764bf67cc1638b2c31e5783ac467d3"
        );
        bytes32[] memory publicInputs = new bytes32[](1);
        publicInputs[0] = bytes32(0x100a1699a37444f7f0809a13d20f4658f91299d514b954d6c91c3993df56e2ac);
        bool result = resolver.prove(proof, publicInputs);
        return result;
    }
}
